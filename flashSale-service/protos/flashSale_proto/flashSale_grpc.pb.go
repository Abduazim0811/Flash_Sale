// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/flashSale_proto/flashSale.proto

package flashSale_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FlashSaleService_CreateFlashSale_FullMethodName     = "/FlashSaleService/CreateFlashSale"
	FlashSaleService_UpdateFlashSale_FullMethodName     = "/FlashSaleService/UpdateFlashSale"
	FlashSaleService_DeleteFlashSale_FullMethodName     = "/FlashSaleService/DeleteFlashSale"
	FlashSaleService_ListFlashSales_FullMethodName      = "/FlashSaleService/ListFlashSales"
	FlashSaleService_GetActiveFlashSales_FullMethodName = "/FlashSaleService/GetActiveFlashSales"
	FlashSaleService_PurchaseProduct_FullMethodName     = "/FlashSaleService/PurchaseProduct"
)

// FlashSaleServiceClient is the client API for FlashSaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashSaleServiceClient interface {
	CreateFlashSale(ctx context.Context, in *CreateFlashSaleRequest, opts ...grpc.CallOption) (*CreateFlashSaleResponse, error)
	UpdateFlashSale(ctx context.Context, in *UpdateFlashSaleRequest, opts ...grpc.CallOption) (*UpdateFlashSaleResponse, error)
	DeleteFlashSale(ctx context.Context, in *DeleteFlashSaleRequest, opts ...grpc.CallOption) (*DeleteFlashSaleResponse, error)
	ListFlashSales(ctx context.Context, in *ListFlashSalesRequest, opts ...grpc.CallOption) (*ListFlashSalesResponse, error)
	GetActiveFlashSales(ctx context.Context, in *GetActiveFlashSalesRequest, opts ...grpc.CallOption) (*GetActiveFlashSalesResponse, error)
	PurchaseProduct(ctx context.Context, in *PurchaseProductRequest, opts ...grpc.CallOption) (*PurchaseProductResponse, error)
}

type flashSaleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashSaleServiceClient(cc grpc.ClientConnInterface) FlashSaleServiceClient {
	return &flashSaleServiceClient{cc}
}

func (c *flashSaleServiceClient) CreateFlashSale(ctx context.Context, in *CreateFlashSaleRequest, opts ...grpc.CallOption) (*CreateFlashSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFlashSaleResponse)
	err := c.cc.Invoke(ctx, FlashSaleService_CreateFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) UpdateFlashSale(ctx context.Context, in *UpdateFlashSaleRequest, opts ...grpc.CallOption) (*UpdateFlashSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFlashSaleResponse)
	err := c.cc.Invoke(ctx, FlashSaleService_UpdateFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) DeleteFlashSale(ctx context.Context, in *DeleteFlashSaleRequest, opts ...grpc.CallOption) (*DeleteFlashSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFlashSaleResponse)
	err := c.cc.Invoke(ctx, FlashSaleService_DeleteFlashSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) ListFlashSales(ctx context.Context, in *ListFlashSalesRequest, opts ...grpc.CallOption) (*ListFlashSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFlashSalesResponse)
	err := c.cc.Invoke(ctx, FlashSaleService_ListFlashSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) GetActiveFlashSales(ctx context.Context, in *GetActiveFlashSalesRequest, opts ...grpc.CallOption) (*GetActiveFlashSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveFlashSalesResponse)
	err := c.cc.Invoke(ctx, FlashSaleService_GetActiveFlashSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleServiceClient) PurchaseProduct(ctx context.Context, in *PurchaseProductRequest, opts ...grpc.CallOption) (*PurchaseProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseProductResponse)
	err := c.cc.Invoke(ctx, FlashSaleService_PurchaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashSaleServiceServer is the server API for FlashSaleService service.
// All implementations must embed UnimplementedFlashSaleServiceServer
// for forward compatibility
type FlashSaleServiceServer interface {
	CreateFlashSale(context.Context, *CreateFlashSaleRequest) (*CreateFlashSaleResponse, error)
	UpdateFlashSale(context.Context, *UpdateFlashSaleRequest) (*UpdateFlashSaleResponse, error)
	DeleteFlashSale(context.Context, *DeleteFlashSaleRequest) (*DeleteFlashSaleResponse, error)
	ListFlashSales(context.Context, *ListFlashSalesRequest) (*ListFlashSalesResponse, error)
	GetActiveFlashSales(context.Context, *GetActiveFlashSalesRequest) (*GetActiveFlashSalesResponse, error)
	PurchaseProduct(context.Context, *PurchaseProductRequest) (*PurchaseProductResponse, error)
	mustEmbedUnimplementedFlashSaleServiceServer()
}

// UnimplementedFlashSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashSaleServiceServer struct {
}

func (UnimplementedFlashSaleServiceServer) CreateFlashSale(context.Context, *CreateFlashSaleRequest) (*CreateFlashSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) UpdateFlashSale(context.Context, *UpdateFlashSaleRequest) (*UpdateFlashSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) DeleteFlashSale(context.Context, *DeleteFlashSaleRequest) (*DeleteFlashSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFlashSale not implemented")
}
func (UnimplementedFlashSaleServiceServer) ListFlashSales(context.Context, *ListFlashSalesRequest) (*ListFlashSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlashSales not implemented")
}
func (UnimplementedFlashSaleServiceServer) GetActiveFlashSales(context.Context, *GetActiveFlashSalesRequest) (*GetActiveFlashSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveFlashSales not implemented")
}
func (UnimplementedFlashSaleServiceServer) PurchaseProduct(context.Context, *PurchaseProductRequest) (*PurchaseProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseProduct not implemented")
}
func (UnimplementedFlashSaleServiceServer) mustEmbedUnimplementedFlashSaleServiceServer() {}

// UnsafeFlashSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashSaleServiceServer will
// result in compilation errors.
type UnsafeFlashSaleServiceServer interface {
	mustEmbedUnimplementedFlashSaleServiceServer()
}

func RegisterFlashSaleServiceServer(s grpc.ServiceRegistrar, srv FlashSaleServiceServer) {
	s.RegisterService(&FlashSaleService_ServiceDesc, srv)
}

func _FlashSaleService_CreateFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).CreateFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_CreateFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).CreateFlashSale(ctx, req.(*CreateFlashSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_UpdateFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).UpdateFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_UpdateFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).UpdateFlashSale(ctx, req.(*UpdateFlashSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_DeleteFlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFlashSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).DeleteFlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_DeleteFlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).DeleteFlashSale(ctx, req.(*DeleteFlashSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_ListFlashSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlashSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).ListFlashSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_ListFlashSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).ListFlashSales(ctx, req.(*ListFlashSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_GetActiveFlashSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveFlashSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).GetActiveFlashSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_GetActiveFlashSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).GetActiveFlashSales(ctx, req.(*GetActiveFlashSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSaleService_PurchaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServiceServer).PurchaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSaleService_PurchaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServiceServer).PurchaseProduct(ctx, req.(*PurchaseProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashSaleService_ServiceDesc is the grpc.ServiceDesc for FlashSaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashSaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FlashSaleService",
	HandlerType: (*FlashSaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlashSale",
			Handler:    _FlashSaleService_CreateFlashSale_Handler,
		},
		{
			MethodName: "UpdateFlashSale",
			Handler:    _FlashSaleService_UpdateFlashSale_Handler,
		},
		{
			MethodName: "DeleteFlashSale",
			Handler:    _FlashSaleService_DeleteFlashSale_Handler,
		},
		{
			MethodName: "ListFlashSales",
			Handler:    _FlashSaleService_ListFlashSales_Handler,
		},
		{
			MethodName: "GetActiveFlashSales",
			Handler:    _FlashSaleService_GetActiveFlashSales_Handler,
		},
		{
			MethodName: "PurchaseProduct",
			Handler:    _FlashSaleService_PurchaseProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/flashSale_proto/flashSale.proto",
}
